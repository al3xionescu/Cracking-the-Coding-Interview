/*
Given two singly linked lists, determine if the two lists intersect. Return the intersecting node. Note that the intersection is 
defined based on reference, not value. 
*/

/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode(int x) {
 *         val = x;
 *         next = null;
 *     }
 * }
 */

public class Solution {
   public ListNode getIntersectionNode(ListNode headA, ListNode headB){
   if(headA==null||headB==null) return null;
   Result result1= getTailandSize(headA);
   Result result2= getTailandSize(headB);
   if(result1.tail!=result2.tail)
      return null;
   ListNode shorter = result1.size < result2.size ? headA : headB;
   ListNode longer = result1.size < result2.size ? headB : headA;
   longer = getKthNode(longer, Math.abs(result1.size-result2.size));
   while(shorter!=longer){
      shorter= shorter.next;
      longer= longer.next;
   }
   return longer;
}
   public class Result{
      public ListNode tail;
      public int size;
      public Result(ListNode tail, int size){
         this.tail = tail;
         this.size = size;
      }
   }
   public Result getTailandSize(ListNode list){
      if(list==null) return null;
      int size=1;
      ListNode current = list;
      while(current.next!=null){
         size++;
         current = current.next;
      }
      return new Result(current, size);
   }
   public ListNode getKthNode(ListNode head, int k){
      ListNode current = head;
      while(k>0 && current !=null){
         current = current.next;
         k--;
      }
      return current;
   }

}
