/*
Design an algorithm and write code to find the first common ancestor
of two nodes in a binary tree. Avoid storing additional nodes in a data structure. NOTE: This is not necessarily a binary search tree.
*/

#include <bits/stdc++.h>

using namespace std;
struct Node {
    Node *left, *right, *parent;
    int key;
};
Node *newNode(int data){
    Node *temp = new Node;
    temp->key = data;
    temp->parent = temp->left=temp->right=NULL;
    return temp;
}
Node *insert(Node *node, int key){
    if (node ==NULL) return newNode(key);
    if (key<node->key){
        node->left = insert(node->left,key);
        node->left->parent = node;
    }
    else if(key>node->key){
        node->right = insert(node->right,key);
        node->right->parent = node;
    }
    return node;
}
Node *LCA(Node *n1, Node *n2){
    map<Node *, bool> ancestors;
    while(n1!=NULL){
        ancestors[n1]=true;
        n1 = n1->parent;
    }
    while(n2!=NULL){
        if(ancestors.find(n2)!=ancestors.end())
            return n2;
        n2=n2->parent;
    }
    return NULL;
}
int main()
{
    Node *root = NULL;
    root = insert(root, 20);
    root = insert(root, 8);
    root = insert(root, 22);
    root = insert(root, 4);
    root = insert(root, 12);
    root = insert(root, 10);
    root = insert(root, 14);

    Node *n1 = root->left->right->left;
    Node *n2 = root->left;
    Node *lca = LCA(n1, n2);

    printf("LCA of %d and %d is %d \n", n1->key, n2->key, lca->key);


    return 0;
}
 Note: The above implementation uses insert of Binary Search Tree to create a Binary Tree, but the function LCA is for any Binary Tree
 (not necessarily a Binary Search Tree).
 
 The above solution requires extra space because we need to use a hash table to store visited ancestors. We can solve the problem in 
 O(1) extra space using following fact: If both nodes are at the same level and if we traverse up using parent pointers of both nodes,
 the first common node in the path to root is lca(lowest common ancestor). The idea is to find depths of given nodes and move up the 
 deeper node pointer by the difference between depths. Once both nodes reach same level, traverse them up and return the first common
 node.
 
 #include <bits/stdc++.h>

using namespace std;
struct Node {
    Node *left, *right, *parent;
    int key;
};
Node *newNode(int data){
    Node *temp = new Node;
    temp->key = data;
    temp->parent = temp->left=temp->right=NULL;
    return temp;
}
Node *insert(Node *node, int key){
    if (node ==NULL) return newNode(key);
    if (key<node->key){
        node->left = insert(node->left,key);
        node->left->parent = node;
    }
    else if(key>node->key){
        node->right = insert(node->right,key);
        node->right->parent = node;
    }
    return node;
}
int depth(Node *node){
    int d=-1;
    while(node){
        ++d;
        node=node->parent;
    }
    return d;
}
Node *LCA(Node *n1, Node *n2){
    int d1=depth(n1), d2=depth(n2);
    int diff = d1-d2;
    if (diff<0){
        Node *temp = n1;
        n1=n2;
        n2=temp;
        diff=-diff;
    }
    while(diff--){
        n1=n1->parent;
    }
    while(n1&&n2){
        if (n1==n2)
            return n1;
        n1=n1->parent;
        n2=n2->parent;
    }
    return NULL;
}
int main()
{
    Node *root = NULL;
    root = insert(root, 20);
    root = insert(root, 8);
    root = insert(root, 22);
    root = insert(root, 4);
    root = insert(root, 12);
    root = insert(root, 10);
    root = insert(root, 14);

    Node *n1 = root->left->right->left;
    Node *n2 = root->right;
    Node *lca = LCA(n1, n2);

    printf("LCA of %d and %d is %d \n", n1->key, n2->key, lca->key);

    return 0;
}

 
 
