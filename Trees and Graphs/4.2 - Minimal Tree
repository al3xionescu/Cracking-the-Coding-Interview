/*
Given a sorted (increasing order) array with unique integer elements, write an algorithm
to create a binary search tree with minimal height.
*/

#include<stdio.h>
#include<stdlib.h>
struct TNode {
    int data;
    struct TNode* left;
    struct TNode* right;
};
struct TNode* newNode(int data) {
    struct TNode* temp = (struct TNode*)malloc(sizeof(struct TNode));
    temp->data = data;
    temp->left = temp->right = NULL;
    return temp;
}
struct TNode* sortedArrayToBST(int arr[], int start, int end) {
    if (start > end) {
        return NULL;
    }
    int mid = (start + end)/2;
    struct TNode *root = newNode(arr[mid]);
    root->left = sortedArrayToBST(arr,start, mid-1);
    root->right = sortedArrayToBST(arr, mid+1, end);
    return root;
}
void preOrder(struct TNode* node) {
    if (node == NULL)
        return;
    printf("%d ", node->data);
    preOrder(node->left);
    preOrder(node->right);
}
int main()
{
    int arr[] = {1,2,3,4,5,6};
    int n = sizeof(arr)/sizeof(arr[0]);
    struct TNode *root = sortedArrayToBST(arr, 0, n-1);
    preOrder(root);
    return 0;
}
