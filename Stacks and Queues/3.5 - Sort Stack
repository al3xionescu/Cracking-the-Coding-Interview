/*
Write a program to sort a stack such that the smallest items are on the top. You can use an additional temporary stack, but you may not 
copy the elements into any other data structure (such as an array). The stack supports the following operations: push, pop, peek, and is 
Empty. 
*/

import java.util.Arrays;
import java.util.Stack;

public class App {
    // O(n^2) time and O(n) space
    public static Stack<Integer> sortStack(Stack<Integer> stack) {
        Stack<Integer> result = new Stack<Integer>();
        while (!stack.isEmpty() ) {
            int item = stack.pop();
            while (!result.isEmpty() && item > result.peek()) {
                stack.push(result.pop());
            }
            result.push(item);
        }
        return result;
    }

    TEST:
    
    public static void main(String[] args) {
        Integer[] a = {2,6,5,4,1,3,8,7};
        Stack<Integer> stack = new Stack<Integer>();
        stack.addAll(Arrays.asList(a));
        System.out.print(sortStack(stack));
    }
}
